Terminals which are not used

   STRING_VALUE
   COMMENT
   THEN
   RETURN
   MAIN
   INCLUDE
   HASH
   SINGLE_QUOTE
   DOUBLE_QUOTE
   OSQ_BRACKET
   CSQ_BRACKET
   TWO_DOTS
   PLUS_EQUAL
   MINUS_EQUAL
   MULTIPLY_EQUAL
   DIVIDE_EQUAL
   VOID


Grammar

    0 $accept: Root $end

    1 Root: Program

    2 Program: statements

    3 statements: statement
    4           | statement statements

    5 statement: Var_Dec
    6          | Assign SEMI_COLON
    7          | ifstmts
    8          | forstmt
    9          | dowhilestmt
   10          | whilestmt
   11          | switchstmt

   12 ifstmts: ifstmt
   13        | ifstmt elsestmt
   14        | ifstmt elifs
   15        | ifstmt elifs elsestmt

   16 ifstmt: IF OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

   17 elifs: elifstmt
   18      | elifstmt elifs

   19 elifstmt: ELIF OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

   20 elsestmt: ELSE OBRACE statements CBRACE

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE

   22 whilestmt: WHILE OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

   23 dowhilestmt: DO OBRACE statements CBRACE WHILE OBRACKET LOG_EXPR CBRACKET

   24 switchstmt: SWITCH OBRACKET IDENTIFIER CBRACKET OBRACE switchcases CBRACE

   25 switchcases: caselist DEFAULT COLON statements
   26            | DEFAULT COLON statements

   27 caselist: case
   28         | case caselist

   29 case: CASE OBRACKET DataVAL CBRACKET COLON statements

   30 Var_Dec: CONST Data_Type Assign SEMI_COLON
   31        | Data_Type Assign SEMI_COLON

   32 Data_Type: INT
   33          | FLOAT
   34          | BOOL
   35          | STRING
   36          | CHAR

   37 Assign: identifier_list EQUAL Expr
   38       | identifier_list

   39 identifier_list: IDENTIFIER
   40                | IDENTIFIER COMMA identifier_list

   41 Expr: LOG_EXPR

   42 DataVAL: CHAR_VALUE
   43        | TRUE
   44        | FALSE
   45        | MATH_EXPR

   46 LOG_EXPR: LOG_EXPR AND DataVAL
   47         | LOG_EXPR OR DataVAL
   48         | LOG_EXPR GREATER_THAN DataVAL
   49         | LOG_EXPR GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR SMALLER_THAN DataVAL
   51         | LOG_EXPR SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR EQUAL_EQUAL DataVAL
   53         | LOG_EXPR NOT_EQUAL DataVAL
   54         | NOT DataVAL
   55         | DataVAL
   56         | OBRACKET LOG_EXPR CBRACKET

   57 MATH_EXPR: Casting
   58          | Casting MINUS MATH_EXPR
   59          | Casting PLUS MATH_EXPR
   60          | Casting DIVIDE MATH_EXPR
   61          | Casting MULTIPLY MATH_EXPR
   62          | Casting REMAINDER MATH_EXPR
   63          | Casting POWER MATH_EXPR
   64          | UniaryEXP

   65 Casting: MATH_CALC
   66        | OBRACKET Data_Type CBRACKET MATH_CALC

   67 MATH_CALC: INT_VALUE
   68          | FLOAT_VALUE
   69          | IDENTIFIER

   70 UniaryEXP: IDENTIFIER PLUS_PLUS
   71          | IDENTIFIER MINUS_MINUS
   72          | PLUS_PLUS IDENTIFIER
   73          | MINUS_MINUS IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 32
INT_VALUE (259) 67
BOOL (260) 34
FLOAT (261) 33
FLOAT_VALUE (262) 68
CHAR (263) 36
CHAR_VALUE (264) 42
STRING (265) 35
STRING_VALUE (266)
IDENTIFIER (267) 24 39 40 69 70 71 72 73
COMMENT (268)
IF (269) 16
THEN (270)
WHILE (271) 22 23
FOR (272) 21
SWITCH (273) 24
CASE (274) 29
DO (275) 23
DEFAULT (276) 25 26
ELIF (277) 19
ELSE (278) 20
RETURN (279)
MAIN (280)
INCLUDE (281)
HASH (282)
SINGLE_QUOTE (283)
DOUBLE_QUOTE (284)
SEMI_COLON (285) 6 21 30 31
COLON (286) 25 26 29
OBRACKET (287) 16 19 21 22 23 24 29 56 66
CBRACKET (288) 16 19 21 22 23 24 29 56 66
OBRACE (289) 16 19 20 21 22 23 24
CBRACE (290) 16 19 20 21 22 23 24
OSQ_BRACKET (291)
CSQ_BRACKET (292)
COMMA (293) 40
TWO_DOTS (294)
TRUE (295) 43
FALSE (296) 44
AND (297) 46
OR (298) 47
EQUAL_EQUAL (299) 52
NOT_EQUAL (300) 53
GREATER_THAN (301) 48
GREATER_THAN_EQUAL (302) 49
SMALLER_THAN (303) 50
SMALLER_THAN_EQUAL (304) 51
NOT (305) 54
REMAINDER (306) 62
PLUS_EQUAL (307)
MINUS_EQUAL (308)
MULTIPLY_EQUAL (309)
DIVIDE_EQUAL (310)
PLUS_PLUS (311) 70 72
MINUS_MINUS (312) 71 73
EQUAL (313) 37
CONST (314) 30
VOID (315)
MINUS (316) 58
PLUS (317) 59
DIVIDE (318) 60
MULTIPLY (319) 61
POWER (320) 63


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
Root (67)
    on left: 1, on right: 0
Program (68)
    on left: 2, on right: 1
statements (69)
    on left: 3 4, on right: 2 4 16 19 20 21 22 23 25 26 29
statement (70)
    on left: 5 6 7 8 9 10 11, on right: 3 4
ifstmts (71)
    on left: 12 13 14 15, on right: 7
ifstmt (72)
    on left: 16, on right: 12 13 14 15
elifs (73)
    on left: 17 18, on right: 14 15 18
elifstmt (74)
    on left: 19, on right: 17 18
elsestmt (75)
    on left: 20, on right: 13 15
forstmt (76)
    on left: 21, on right: 8
whilestmt (77)
    on left: 22, on right: 10
dowhilestmt (78)
    on left: 23, on right: 9
switchstmt (79)
    on left: 24, on right: 11
switchcases (80)
    on left: 25 26, on right: 24
caselist (81)
    on left: 27 28, on right: 25 28
case (82)
    on left: 29, on right: 27 28
Var_Dec (83)
    on left: 30 31, on right: 5 21
Data_Type (84)
    on left: 32 33 34 35 36, on right: 30 31 66
Assign (85)
    on left: 37 38, on right: 6 30 31
identifier_list (86)
    on left: 39 40, on right: 37 38 40
Expr (87)
    on left: 41, on right: 37
DataVAL (88)
    on left: 42 43 44 45, on right: 29 46 47 48 49 50 51 52 53 54 55
LOG_EXPR (89)
    on left: 46 47 48 49 50 51 52 53 54 55 56, on right: 16 19 21 22
    23 41 46 47 48 49 50 51 52 53 56
MATH_EXPR (90)
    on left: 57 58 59 60 61 62 63 64, on right: 45 58 59 60 61 62 63
Casting (91)
    on left: 65 66, on right: 57 58 59 60 61 62 63
MATH_CALC (92)
    on left: 67 68 69, on right: 65 66
UniaryEXP (93)
    on left: 70 71 72 73, on right: 64


state 0

    0 $accept: . Root $end

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    Root             go to state 13
    Program          go to state 14
    statements       go to state 15
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 1

   32 Data_Type: INT .

    $default  reduce using rule 32 (Data_Type)


state 2

   34 Data_Type: BOOL .

    $default  reduce using rule 34 (Data_Type)


state 3

   33 Data_Type: FLOAT .

    $default  reduce using rule 33 (Data_Type)


state 4

   36 Data_Type: CHAR .

    $default  reduce using rule 36 (Data_Type)


state 5

   35 Data_Type: STRING .

    $default  reduce using rule 35 (Data_Type)


state 6

   39 identifier_list: IDENTIFIER .
   40                | IDENTIFIER . COMMA identifier_list

    COMMA  shift, and go to state 27

    $default  reduce using rule 39 (identifier_list)


state 7

   16 ifstmt: IF . OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

    OBRACKET  shift, and go to state 28


state 8

   22 whilestmt: WHILE . OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

    OBRACKET  shift, and go to state 29


state 9

   21 forstmt: FOR . OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE

    OBRACKET  shift, and go to state 30


state 10

   24 switchstmt: SWITCH . OBRACKET IDENTIFIER CBRACKET OBRACE switchcases CBRACE

    OBRACKET  shift, and go to state 31


state 11

   23 dowhilestmt: DO . OBRACE statements CBRACE WHILE OBRACKET LOG_EXPR CBRACKET

    OBRACE  shift, and go to state 32


state 12

   30 Var_Dec: CONST . Data_Type Assign SEMI_COLON

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    STRING  shift, and go to state 5

    Data_Type  go to state 33


state 13

    0 $accept: Root . $end

    $end  shift, and go to state 34


state 14

    1 Root: Program .

    $default  reduce using rule 1 (Root)


state 15

    2 Program: statements .

    $default  reduce using rule 2 (Program)


state 16

    3 statements: statement .
    4           | statement . statements

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    $default  reduce using rule 3 (statements)

    statements       go to state 35
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 17

    7 statement: ifstmts .

    $default  reduce using rule 7 (statement)


state 18

   12 ifstmts: ifstmt .
   13        | ifstmt . elsestmt
   14        | ifstmt . elifs
   15        | ifstmt . elifs elsestmt

    ELIF  shift, and go to state 36
    ELSE  shift, and go to state 37

    $default  reduce using rule 12 (ifstmts)

    elifs     go to state 38
    elifstmt  go to state 39
    elsestmt  go to state 40


state 19

    8 statement: forstmt .

    $default  reduce using rule 8 (statement)


state 20

   10 statement: whilestmt .

    $default  reduce using rule 10 (statement)


state 21

    9 statement: dowhilestmt .

    $default  reduce using rule 9 (statement)


state 22

   11 statement: switchstmt .

    $default  reduce using rule 11 (statement)


state 23

    5 statement: Var_Dec .

    $default  reduce using rule 5 (statement)


state 24

   31 Var_Dec: Data_Type . Assign SEMI_COLON

    IDENTIFIER  shift, and go to state 6

    Assign           go to state 41
    identifier_list  go to state 26


state 25

    6 statement: Assign . SEMI_COLON

    SEMI_COLON  shift, and go to state 42


state 26

   37 Assign: identifier_list . EQUAL Expr
   38       | identifier_list .

    EQUAL  shift, and go to state 43

    $default  reduce using rule 38 (Assign)


state 27

   40 identifier_list: IDENTIFIER COMMA . identifier_list

    IDENTIFIER  shift, and go to state 6

    identifier_list  go to state 44


state 28

   16 ifstmt: IF OBRACKET . LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 56
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 29

   22 whilestmt: WHILE OBRACKET . LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 61
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 30

   21 forstmt: FOR OBRACKET . Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    STRING  shift, and go to state 5
    CONST   shift, and go to state 12

    Var_Dec    go to state 62
    Data_Type  go to state 24


state 31

   24 switchstmt: SWITCH OBRACKET . IDENTIFIER CBRACKET OBRACE switchcases CBRACE

    IDENTIFIER  shift, and go to state 63


state 32

   23 dowhilestmt: DO OBRACE . statements CBRACE WHILE OBRACKET LOG_EXPR CBRACKET

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 64
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 33

   30 Var_Dec: CONST Data_Type . Assign SEMI_COLON

    IDENTIFIER  shift, and go to state 6

    Assign           go to state 65
    identifier_list  go to state 26


state 34

    0 $accept: Root $end .

    $default  accept


state 35

    4 statements: statement statements .

    $default  reduce using rule 4 (statements)


state 36

   19 elifstmt: ELIF . OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE

    OBRACKET  shift, and go to state 66


state 37

   20 elsestmt: ELSE . OBRACE statements CBRACE

    OBRACE  shift, and go to state 67


state 38

   14 ifstmts: ifstmt elifs .
   15        | ifstmt elifs . elsestmt

    ELSE  shift, and go to state 37

    $default  reduce using rule 14 (ifstmts)

    elsestmt  go to state 68


state 39

   17 elifs: elifstmt .
   18      | elifstmt . elifs

    ELIF  shift, and go to state 36

    $default  reduce using rule 17 (elifs)

    elifs     go to state 69
    elifstmt  go to state 39


state 40

   13 ifstmts: ifstmt elsestmt .

    $default  reduce using rule 13 (ifstmts)


state 41

   31 Var_Dec: Data_Type Assign . SEMI_COLON

    SEMI_COLON  shift, and go to state 70


state 42

    6 statement: Assign SEMI_COLON .

    $default  reduce using rule 6 (statement)


state 43

   37 Assign: identifier_list EQUAL . Expr

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    Expr       go to state 71
    DataVAL    go to state 55
    LOG_EXPR   go to state 72
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 44

   40 identifier_list: IDENTIFIER COMMA identifier_list .

    $default  reduce using rule 40 (identifier_list)


state 45

   67 MATH_CALC: INT_VALUE .

    $default  reduce using rule 67 (MATH_CALC)


state 46

   68 MATH_CALC: FLOAT_VALUE .

    $default  reduce using rule 68 (MATH_CALC)


state 47

   42 DataVAL: CHAR_VALUE .

    $default  reduce using rule 42 (DataVAL)


state 48

   69 MATH_CALC: IDENTIFIER .
   70 UniaryEXP: IDENTIFIER . PLUS_PLUS
   71          | IDENTIFIER . MINUS_MINUS

    PLUS_PLUS    shift, and go to state 73
    MINUS_MINUS  shift, and go to state 74

    $default  reduce using rule 69 (MATH_CALC)


state 49

   56 LOG_EXPR: OBRACKET . LOG_EXPR CBRACKET
   66 Casting: OBRACKET . Data_Type CBRACKET MATH_CALC

    INT          shift, and go to state 1
    INT_VALUE    shift, and go to state 45
    BOOL         shift, and go to state 2
    FLOAT        shift, and go to state 3
    FLOAT_VALUE  shift, and go to state 46
    CHAR         shift, and go to state 4
    CHAR_VALUE   shift, and go to state 47
    STRING       shift, and go to state 5
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    Data_Type  go to state 75
    DataVAL    go to state 55
    LOG_EXPR   go to state 76
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 50

   43 DataVAL: TRUE .

    $default  reduce using rule 43 (DataVAL)


state 51

   44 DataVAL: FALSE .

    $default  reduce using rule 44 (DataVAL)


state 52

   54 LOG_EXPR: NOT . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 78
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 53

   72 UniaryEXP: PLUS_PLUS . IDENTIFIER

    IDENTIFIER  shift, and go to state 79


state 54

   73 UniaryEXP: MINUS_MINUS . IDENTIFIER

    IDENTIFIER  shift, and go to state 80


state 55

   55 LOG_EXPR: DataVAL .

    $default  reduce using rule 55 (LOG_EXPR)


state 56

   16 ifstmt: IF OBRACKET LOG_EXPR . CBRACKET OBRACE statements CBRACE
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    CBRACKET            shift, and go to state 81
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 57

   45 DataVAL: MATH_EXPR .

    $default  reduce using rule 45 (DataVAL)


state 58

   57 MATH_EXPR: Casting .
   58          | Casting . MINUS MATH_EXPR
   59          | Casting . PLUS MATH_EXPR
   60          | Casting . DIVIDE MATH_EXPR
   61          | Casting . MULTIPLY MATH_EXPR
   62          | Casting . REMAINDER MATH_EXPR
   63          | Casting . POWER MATH_EXPR

    REMAINDER  shift, and go to state 90
    MINUS      shift, and go to state 91
    PLUS       shift, and go to state 92
    DIVIDE     shift, and go to state 93
    MULTIPLY   shift, and go to state 94
    POWER      shift, and go to state 95

    $default  reduce using rule 57 (MATH_EXPR)


state 59

   65 Casting: MATH_CALC .

    $default  reduce using rule 65 (Casting)


state 60

   64 MATH_EXPR: UniaryEXP .

    $default  reduce using rule 64 (MATH_EXPR)


state 61

   22 whilestmt: WHILE OBRACKET LOG_EXPR . CBRACKET OBRACE statements CBRACE
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    CBRACKET            shift, and go to state 96
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 62

   21 forstmt: FOR OBRACKET Var_Dec . LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 97
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 63

   24 switchstmt: SWITCH OBRACKET IDENTIFIER . CBRACKET OBRACE switchcases CBRACE

    CBRACKET  shift, and go to state 98


state 64

   23 dowhilestmt: DO OBRACE statements . CBRACE WHILE OBRACKET LOG_EXPR CBRACKET

    CBRACE  shift, and go to state 99


state 65

   30 Var_Dec: CONST Data_Type Assign . SEMI_COLON

    SEMI_COLON  shift, and go to state 100


state 66

   19 elifstmt: ELIF OBRACKET . LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 101
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 67

   20 elsestmt: ELSE OBRACE . statements CBRACE

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 102
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 68

   15 ifstmts: ifstmt elifs elsestmt .

    $default  reduce using rule 15 (ifstmts)


state 69

   18 elifs: elifstmt elifs .

    $default  reduce using rule 18 (elifs)


state 70

   31 Var_Dec: Data_Type Assign SEMI_COLON .

    $default  reduce using rule 31 (Var_Dec)


state 71

   37 Assign: identifier_list EQUAL Expr .

    $default  reduce using rule 37 (Assign)


state 72

   41 Expr: LOG_EXPR .
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89

    $default  reduce using rule 41 (Expr)


state 73

   70 UniaryEXP: IDENTIFIER PLUS_PLUS .

    $default  reduce using rule 70 (UniaryEXP)


state 74

   71 UniaryEXP: IDENTIFIER MINUS_MINUS .

    $default  reduce using rule 71 (UniaryEXP)


state 75

   66 Casting: OBRACKET Data_Type . CBRACKET MATH_CALC

    CBRACKET  shift, and go to state 103


state 76

   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL
   56         | OBRACKET LOG_EXPR . CBRACKET

    CBRACKET            shift, and go to state 104
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 77

   66 Casting: OBRACKET . Data_Type CBRACKET MATH_CALC

    INT     shift, and go to state 1
    BOOL    shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    STRING  shift, and go to state 5

    Data_Type  go to state 75


state 78

   54 LOG_EXPR: NOT DataVAL .

    $default  reduce using rule 54 (LOG_EXPR)


state 79

   72 UniaryEXP: PLUS_PLUS IDENTIFIER .

    $default  reduce using rule 72 (UniaryEXP)


state 80

   73 UniaryEXP: MINUS_MINUS IDENTIFIER .

    $default  reduce using rule 73 (UniaryEXP)


state 81

   16 ifstmt: IF OBRACKET LOG_EXPR CBRACKET . OBRACE statements CBRACE

    OBRACE  shift, and go to state 105


state 82

   46 LOG_EXPR: LOG_EXPR AND . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 106
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 83

   47 LOG_EXPR: LOG_EXPR OR . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 107
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 84

   52 LOG_EXPR: LOG_EXPR EQUAL_EQUAL . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 108
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 85

   53 LOG_EXPR: LOG_EXPR NOT_EQUAL . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 109
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 86

   48 LOG_EXPR: LOG_EXPR GREATER_THAN . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 110
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 87

   49 LOG_EXPR: LOG_EXPR GREATER_THAN_EQUAL . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 111
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 88

   50 LOG_EXPR: LOG_EXPR SMALLER_THAN . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 112
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 89

   51 LOG_EXPR: LOG_EXPR SMALLER_THAN_EQUAL . DataVAL

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 113
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 90

   62 MATH_EXPR: Casting REMAINDER . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 114
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 91

   58 MATH_EXPR: Casting MINUS . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 115
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 92

   59 MATH_EXPR: Casting PLUS . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 116
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 93

   60 MATH_EXPR: Casting DIVIDE . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 117
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 94

   61 MATH_EXPR: Casting MULTIPLY . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 118
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 95

   63 MATH_EXPR: Casting POWER . MATH_EXPR

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    MATH_EXPR  go to state 119
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 96

   22 whilestmt: WHILE OBRACKET LOG_EXPR CBRACKET . OBRACE statements CBRACE

    OBRACE  shift, and go to state 120


state 97

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR . SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    SEMI_COLON          shift, and go to state 121
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 98

   24 switchstmt: SWITCH OBRACKET IDENTIFIER CBRACKET . OBRACE switchcases CBRACE

    OBRACE  shift, and go to state 122


state 99

   23 dowhilestmt: DO OBRACE statements CBRACE . WHILE OBRACKET LOG_EXPR CBRACKET

    WHILE  shift, and go to state 123


state 100

   30 Var_Dec: CONST Data_Type Assign SEMI_COLON .

    $default  reduce using rule 30 (Var_Dec)


state 101

   19 elifstmt: ELIF OBRACKET LOG_EXPR . CBRACKET OBRACE statements CBRACE
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    CBRACKET            shift, and go to state 124
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 102

   20 elsestmt: ELSE OBRACE statements . CBRACE

    CBRACE  shift, and go to state 125


state 103

   66 Casting: OBRACKET Data_Type CBRACKET . MATH_CALC

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    IDENTIFIER   shift, and go to state 126

    MATH_CALC  go to state 127


state 104

   56 LOG_EXPR: OBRACKET LOG_EXPR CBRACKET .

    $default  reduce using rule 56 (LOG_EXPR)


state 105

   16 ifstmt: IF OBRACKET LOG_EXPR CBRACKET OBRACE . statements CBRACE

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 128
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 106

   46 LOG_EXPR: LOG_EXPR AND DataVAL .

    $default  reduce using rule 46 (LOG_EXPR)


state 107

   47 LOG_EXPR: LOG_EXPR OR DataVAL .

    $default  reduce using rule 47 (LOG_EXPR)


state 108

   52 LOG_EXPR: LOG_EXPR EQUAL_EQUAL DataVAL .

    $default  reduce using rule 52 (LOG_EXPR)


state 109

   53 LOG_EXPR: LOG_EXPR NOT_EQUAL DataVAL .

    $default  reduce using rule 53 (LOG_EXPR)


state 110

   48 LOG_EXPR: LOG_EXPR GREATER_THAN DataVAL .

    $default  reduce using rule 48 (LOG_EXPR)


state 111

   49 LOG_EXPR: LOG_EXPR GREATER_THAN_EQUAL DataVAL .

    $default  reduce using rule 49 (LOG_EXPR)


state 112

   50 LOG_EXPR: LOG_EXPR SMALLER_THAN DataVAL .

    $default  reduce using rule 50 (LOG_EXPR)


state 113

   51 LOG_EXPR: LOG_EXPR SMALLER_THAN_EQUAL DataVAL .

    $default  reduce using rule 51 (LOG_EXPR)


state 114

   62 MATH_EXPR: Casting REMAINDER MATH_EXPR .

    $default  reduce using rule 62 (MATH_EXPR)


state 115

   58 MATH_EXPR: Casting MINUS MATH_EXPR .

    $default  reduce using rule 58 (MATH_EXPR)


state 116

   59 MATH_EXPR: Casting PLUS MATH_EXPR .

    $default  reduce using rule 59 (MATH_EXPR)


state 117

   60 MATH_EXPR: Casting DIVIDE MATH_EXPR .

    $default  reduce using rule 60 (MATH_EXPR)


state 118

   61 MATH_EXPR: Casting MULTIPLY MATH_EXPR .

    $default  reduce using rule 61 (MATH_EXPR)


state 119

   63 MATH_EXPR: Casting POWER MATH_EXPR .

    $default  reduce using rule 63 (MATH_EXPR)


state 120

   22 whilestmt: WHILE OBRACKET LOG_EXPR CBRACKET OBRACE . statements CBRACE

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 129
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 121

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON . LOG_EXPR CBRACKET OBRACE statements CBRACE

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 130
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 122

   24 switchstmt: SWITCH OBRACKET IDENTIFIER CBRACKET OBRACE . switchcases CBRACE

    CASE     shift, and go to state 131
    DEFAULT  shift, and go to state 132

    switchcases  go to state 133
    caselist     go to state 134
    case         go to state 135


state 123

   23 dowhilestmt: DO OBRACE statements CBRACE WHILE . OBRACKET LOG_EXPR CBRACKET

    OBRACKET  shift, and go to state 136


state 124

   19 elifstmt: ELIF OBRACKET LOG_EXPR CBRACKET . OBRACE statements CBRACE

    OBRACE  shift, and go to state 137


state 125

   20 elsestmt: ELSE OBRACE statements CBRACE .

    $default  reduce using rule 20 (elsestmt)


state 126

   69 MATH_CALC: IDENTIFIER .

    $default  reduce using rule 69 (MATH_CALC)


state 127

   66 Casting: OBRACKET Data_Type CBRACKET MATH_CALC .

    $default  reduce using rule 66 (Casting)


state 128

   16 ifstmt: IF OBRACKET LOG_EXPR CBRACKET OBRACE statements . CBRACE

    CBRACE  shift, and go to state 138


state 129

   22 whilestmt: WHILE OBRACKET LOG_EXPR CBRACKET OBRACE statements . CBRACE

    CBRACE  shift, and go to state 139


state 130

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR . CBRACKET OBRACE statements CBRACE
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    CBRACKET            shift, and go to state 140
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 131

   29 case: CASE . OBRACKET DataVAL CBRACKET COLON statements

    OBRACKET  shift, and go to state 141


state 132

   26 switchcases: DEFAULT . COLON statements

    COLON  shift, and go to state 142


state 133

   24 switchstmt: SWITCH OBRACKET IDENTIFIER CBRACKET OBRACE switchcases . CBRACE

    CBRACE  shift, and go to state 143


state 134

   25 switchcases: caselist . DEFAULT COLON statements

    DEFAULT  shift, and go to state 144


state 135

   27 caselist: case .
   28         | case . caselist

    CASE  shift, and go to state 131

    $default  reduce using rule 27 (caselist)

    caselist  go to state 145
    case      go to state 135


state 136

   23 dowhilestmt: DO OBRACE statements CBRACE WHILE OBRACKET . LOG_EXPR CBRACKET

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 49
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    NOT          shift, and go to state 52
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 55
    LOG_EXPR   go to state 146
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 137

   19 elifstmt: ELIF OBRACKET LOG_EXPR CBRACKET OBRACE . statements CBRACE

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 147
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 138

   16 ifstmt: IF OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE .

    $default  reduce using rule 16 (ifstmt)


state 139

   22 whilestmt: WHILE OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE .

    $default  reduce using rule 22 (whilestmt)


state 140

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET . OBRACE statements CBRACE

    OBRACE  shift, and go to state 148


state 141

   29 case: CASE OBRACKET . DataVAL CBRACKET COLON statements

    INT_VALUE    shift, and go to state 45
    FLOAT_VALUE  shift, and go to state 46
    CHAR_VALUE   shift, and go to state 47
    IDENTIFIER   shift, and go to state 48
    OBRACKET     shift, and go to state 77
    TRUE         shift, and go to state 50
    FALSE        shift, and go to state 51
    PLUS_PLUS    shift, and go to state 53
    MINUS_MINUS  shift, and go to state 54

    DataVAL    go to state 149
    MATH_EXPR  go to state 57
    Casting    go to state 58
    MATH_CALC  go to state 59
    UniaryEXP  go to state 60


state 142

   26 switchcases: DEFAULT COLON . statements

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 150
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 143

   24 switchstmt: SWITCH OBRACKET IDENTIFIER CBRACKET OBRACE switchcases CBRACE .

    $default  reduce using rule 24 (switchstmt)


state 144

   25 switchcases: caselist DEFAULT . COLON statements

    COLON  shift, and go to state 151


state 145

   28 caselist: case caselist .

    $default  reduce using rule 28 (caselist)


state 146

   23 dowhilestmt: DO OBRACE statements CBRACE WHILE OBRACKET LOG_EXPR . CBRACKET
   46 LOG_EXPR: LOG_EXPR . AND DataVAL
   47         | LOG_EXPR . OR DataVAL
   48         | LOG_EXPR . GREATER_THAN DataVAL
   49         | LOG_EXPR . GREATER_THAN_EQUAL DataVAL
   50         | LOG_EXPR . SMALLER_THAN DataVAL
   51         | LOG_EXPR . SMALLER_THAN_EQUAL DataVAL
   52         | LOG_EXPR . EQUAL_EQUAL DataVAL
   53         | LOG_EXPR . NOT_EQUAL DataVAL

    CBRACKET            shift, and go to state 152
    AND                 shift, and go to state 82
    OR                  shift, and go to state 83
    EQUAL_EQUAL         shift, and go to state 84
    NOT_EQUAL           shift, and go to state 85
    GREATER_THAN        shift, and go to state 86
    GREATER_THAN_EQUAL  shift, and go to state 87
    SMALLER_THAN        shift, and go to state 88
    SMALLER_THAN_EQUAL  shift, and go to state 89


state 147

   19 elifstmt: ELIF OBRACKET LOG_EXPR CBRACKET OBRACE statements . CBRACE

    CBRACE  shift, and go to state 153


state 148

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE . statements CBRACE

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 154
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 149

   29 case: CASE OBRACKET DataVAL . CBRACKET COLON statements

    CBRACKET  shift, and go to state 155


state 150

   26 switchcases: DEFAULT COLON statements .

    $default  reduce using rule 26 (switchcases)


state 151

   25 switchcases: caselist DEFAULT COLON . statements

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 156
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 152

   23 dowhilestmt: DO OBRACE statements CBRACE WHILE OBRACKET LOG_EXPR CBRACKET .

    $default  reduce using rule 23 (dowhilestmt)


state 153

   19 elifstmt: ELIF OBRACKET LOG_EXPR CBRACKET OBRACE statements CBRACE .

    $default  reduce using rule 19 (elifstmt)


state 154

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements . CBRACE

    CBRACE  shift, and go to state 157


state 155

   29 case: CASE OBRACKET DataVAL CBRACKET . COLON statements

    COLON  shift, and go to state 158


state 156

   25 switchcases: caselist DEFAULT COLON statements .

    $default  reduce using rule 25 (switchcases)


state 157

   21 forstmt: FOR OBRACKET Var_Dec LOG_EXPR SEMI_COLON LOG_EXPR CBRACKET OBRACE statements CBRACE .

    $default  reduce using rule 21 (forstmt)


state 158

   29 case: CASE OBRACKET DataVAL CBRACKET COLON . statements

    INT         shift, and go to state 1
    BOOL        shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 6
    IF          shift, and go to state 7
    WHILE       shift, and go to state 8
    FOR         shift, and go to state 9
    SWITCH      shift, and go to state 10
    DO          shift, and go to state 11
    CONST       shift, and go to state 12

    statements       go to state 159
    statement        go to state 16
    ifstmts          go to state 17
    ifstmt           go to state 18
    forstmt          go to state 19
    whilestmt        go to state 20
    dowhilestmt      go to state 21
    switchstmt       go to state 22
    Var_Dec          go to state 23
    Data_Type        go to state 24
    Assign           go to state 25
    identifier_list  go to state 26


state 159

   29 case: CASE OBRACKET DataVAL CBRACKET COLON statements .

    $default  reduce using rule 29 (case)
